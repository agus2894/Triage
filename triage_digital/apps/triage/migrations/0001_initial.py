# Generated by Django 5.2.5 on 2025-10-22 22:52

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('patients', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Profesional',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dni', models.CharField(help_text='Documento Nacional de Identidad (sin puntos)', max_length=8, unique=True, verbose_name='DNI')),
                ('tipo', models.CharField(choices=[('medico', 'Médico'), ('enfermero', 'Enfermero')], max_length=10, verbose_name='Tipo de Profesional')),
                ('matricula', models.CharField(blank=True, help_text='Número de matrícula profesional', max_length=20, verbose_name='Matrícula Profesional')),
                ('activo', models.BooleanField(default=True, help_text='Si el profesional puede acceder al sistema', verbose_name='Activo')),
                ('fecha_registro', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Registro')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Profesional',
                'verbose_name_plural': 'Profesionales',
                'ordering': ['user__last_name', 'user__first_name'],
            },
        ),
        migrations.CreateModel(
            name='SignosVitales',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_hora', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Fecha y hora del registro')),
                ('frecuencia_respiratoria', models.PositiveIntegerField(help_text='Respiraciones por minuto (1-60)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(60)], verbose_name='Frecuencia Respiratoria')),
                ('saturacion_oxigeno', models.PositiveIntegerField(help_text='Porcentaje de saturación de O2 (50-100%)', validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(100)], verbose_name='Saturación de Oxígeno')),
                ('tension_sistolica', models.PositiveIntegerField(help_text='Tensión sistólica en mmHg (50-300)', validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(300)], verbose_name='Tensión Arterial Sistólica')),
                ('frecuencia_cardiaca', models.PositiveIntegerField(help_text='Latidos por minuto (20-200)', validators=[django.core.validators.MinValueValidator(20), django.core.validators.MaxValueValidator(200)], verbose_name='Frecuencia Cardíaca')),
                ('nivel_conciencia', models.CharField(choices=[('A', 'Alerta y orientado'), ('V', 'Responde a estímulos verbales'), ('P', 'Responde solo a estímulos dolorosos'), ('U', 'No responde (inconsciente)')], help_text='Escala AVPU', max_length=1, verbose_name='Nivel de Conciencia')),
                ('temperatura', models.DecimalField(decimal_places=1, help_text='Temperatura en grados Celsius (30.0-45.0)', max_digits=4, validators=[django.core.validators.MinValueValidator(30.0), django.core.validators.MaxValueValidator(45.0)], verbose_name='Temperatura Corporal')),
                ('news_score', models.PositiveIntegerField(blank=True, help_text='Puntaje calculado del National Early Warning Score', null=True, verbose_name='Puntaje NEWS')),
                ('nivel_urgencia', models.CharField(blank=True, choices=[('VERDE', 'Verde - Sin riesgo vital (atención dentro de 60 minutos)'), ('AMARILLO', 'Amarillo - Riesgo moderado (atención dentro de 30 minutos)'), ('ROJO', 'Rojo - Riesgo vital inmediato (atención inmediata)')], max_length=8, null=True, verbose_name='Nivel de Urgencia')),
                ('tiempo_atencion_max', models.PositiveIntegerField(blank=True, help_text='Tiempo máximo de espera en minutos', null=True, verbose_name='Tiempo máximo de atención')),
                ('paciente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='signos_vitales', to='patients.paciente', verbose_name='Paciente')),
                ('profesional', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='signos_registrados', to='triage.profesional', verbose_name='Profesional que registra')),
            ],
            options={
                'verbose_name': 'Signos Vitales',
                'verbose_name_plural': 'Signos Vitales',
                'ordering': ['-fecha_hora'],
            },
        ),
        migrations.AddIndex(
            model_name='profesional',
            index=models.Index(fields=['dni'], name='idx_profesional_dni'),
        ),
        migrations.AddIndex(
            model_name='profesional',
            index=models.Index(fields=['activo', 'tipo'], name='idx_profesional_activo_tipo'),
        ),
        migrations.AddIndex(
            model_name='signosvitales',
            index=models.Index(fields=['-fecha_hora'], name='idx_signos_fecha'),
        ),
        migrations.AddIndex(
            model_name='signosvitales',
            index=models.Index(fields=['paciente', '-fecha_hora'], name='idx_paciente_fecha'),
        ),
        migrations.AddIndex(
            model_name='signosvitales',
            index=models.Index(fields=['profesional', '-fecha_hora'], name='idx_profesional_fecha'),
        ),
        migrations.AddIndex(
            model_name='signosvitales',
            index=models.Index(fields=['nivel_urgencia', '-fecha_hora'], name='idx_urgencia_fecha'),
        ),
    ]
