# Generated by Django 5.2.5 on 2025-10-13 16:04

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('patients', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SignosVitales',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frecuencia_respiratoria', models.PositiveIntegerField(help_text='Respiraciones por minuto (1-60)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(60)], verbose_name='Frecuencia Respiratoria')),
                ('saturacion_oxigeno', models.PositiveIntegerField(help_text='Porcentaje de saturación de O2 (50-100%)', validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(100)], verbose_name='Saturación de Oxígeno')),
                ('tension_sistolica', models.PositiveIntegerField(help_text='Tensión sistólica en mmHg (50-300)', validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(300)], verbose_name='Tensión Arterial Sistólica')),
                ('frecuencia_cardiaca', models.PositiveIntegerField(help_text='Latidos por minuto (20-200)', validators=[django.core.validators.MinValueValidator(20), django.core.validators.MaxValueValidator(200)], verbose_name='Frecuencia Cardíaca')),
                ('nivel_conciencia', models.CharField(choices=[('A', 'Alerta'), ('V', 'Responde a estímulos verbales'), ('P', 'Responde a estímulos dolorosos'), ('U', 'No responde')], help_text='Escala AVPU', max_length=1, verbose_name='Nivel de Conciencia')),
                ('temperatura', models.DecimalField(decimal_places=1, help_text='Temperatura corporal en °C (30.0-45.0)', max_digits=4, validators=[django.core.validators.MinValueValidator(30.0), django.core.validators.MaxValueValidator(45.0)], verbose_name='Temperatura')),
                ('fecha_hora', models.DateTimeField(default=django.utils.timezone.now, help_text='Momento en que se tomaron los signos vitales', verbose_name='Fecha y Hora')),
                ('enfermero', models.ForeignKey(help_text='Enfermero que registró los signos vitales', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Enfermero')),
                ('paciente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='signos_vitales', to='patients.paciente', verbose_name='Paciente')),
            ],
            options={
                'verbose_name': 'Signos Vitales',
                'verbose_name_plural': 'Signos Vitales',
                'ordering': ['-fecha_hora'],
            },
        ),
        migrations.CreateModel(
            name='TriageResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('news_score', models.PositiveIntegerField(help_text='Puntaje calculado del National Early Warning Score', verbose_name='NEWS Score')),
                ('nivel_urgencia', models.CharField(choices=[('GREEN', 'Verde - No urgente (≤60 min)'), ('YELLOW', 'Amarillo - Urgencia (≤30 min)'), ('RED', 'Rojo - Emergencia (inmediato)')], max_length=6, verbose_name='Nivel de Urgencia')),
                ('tiempo_atencion_max', models.PositiveIntegerField(help_text='Tiempo máximo de espera en minutos', verbose_name='Tiempo máximo de atención')),
                ('fecha_calculo', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Fecha del cálculo')),
                ('signos_vitales', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='resultado_triage', to='triage.signosvitales', verbose_name='Signos Vitales')),
            ],
            options={
                'verbose_name': 'Resultado de Triage',
                'verbose_name_plural': 'Resultados de Triage',
                'ordering': ['-fecha_calculo'],
            },
        ),
    ]
